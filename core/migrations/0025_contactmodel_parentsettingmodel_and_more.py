# Generated by Django 5.2.3 on 2025-06-30 13:10

import django.db.models.deletion
from django.db import migrations, models


def migrate_contacts(apps, schema_editor):
    AdditionalStudentInfo = apps.get_model("core", "AdditionalStudentInfo")
    StudentRelativeModel = apps.get_model("core", "StudentRelativeModel")
    ContactModel = apps.get_model("core", "ContactModel")

    for student_info in AdditionalStudentInfo.objects.all():
        # Add student info.
        if student_info.student_phone or student_info.student_mobile or student_info.student_email:
            student_contact = ContactModel.objects.create(
                phone=student_info.student_phone,
                mobile=student_info.student_mobile,
                email=student_info.student_email,
            )
            student = student_info.student
            student.contact = student_contact
            student.save()

        legal_resp_added = False

        # Add mother:
        if student_info.mother_last_name:
            try:
                mother = StudentRelativeModel.objects.get(
                    relationship="M",
                    last_name=student_info.mother_last_name,
                    first_name=student_info.mother_first_name,
                    gender="F",
                    job=student_info.mother_job,
                )
            except models.ObjectDoesNotExist:
                contact = ContactModel.objects.create(
                    phone=student_info.mother_phone,
                    mobile=student_info.mother_mobile,
                    email=student_info.mother_email,
                )
                mother = StudentRelativeModel.objects.create(
                    relationship="M",
                    last_name=student_info.mother_last_name,
                    first_name=student_info.mother_first_name,
                    gender="F",
                    job=student_info.mother_job,
                    contact=contact,
                )

            mother.students.add(student_info.student)
            if (
                mother.last_name == student_info.resp_last_name
                and mother.first_name == student_info.resp_first_name
            ):
                mother.is_legal_responsible = True
                legal_resp_added = True
            mother.save()

        # Add father:
        if student_info.father_last_name:
            try:
                father = StudentRelativeModel.objects.get(
                    relationship="F",
                    last_name=student_info.father_last_name,
                    first_name=student_info.father_first_name,
                    gender="F",
                    job=student_info.father_job,
                )

            except models.ObjectDoesNotExist:
                contact = ContactModel.objects.create(
                    phone=student_info.father_phone,
                    mobile=student_info.father_mobile,
                    email=student_info.father_email,
                )
                father = StudentRelativeModel.objects.create(
                    relationship="F",
                    last_name=student_info.father_last_name,
                    first_name=student_info.father_first_name,
                    gender="F",
                    job=student_info.father_job,
                    contact=contact,
                )

            father.students.add(student_info.student)

            if (
                father.last_name == student_info.resp_last_name
                and father.first_name == student_info.resp_first_name
            ):
                father.is_legal_responsible = True
                legal_resp_added = True
            father.save()

        if not legal_resp_added:
            try:
                legal_resp = StudentRelativeModel.objects.get(
                    relationship="O",
                    last_name=student_info.resp_last_name,
                    first_name=student_info.resp_first_name,
                    is_legal_responsible=True,
                )

            except models.ObjectDoesNotExist:
                contact = ContactModel.objects.create(
                    phone=student_info.resp_phone,
                    mobile=student_info.resp_mobile,
                    email=student_info.resp_email,
                )
                legal_resp = StudentRelativeModel.objects.create(
                    relationship="O",
                    last_name=student_info.resp_last_name,
                    first_name=student_info.resp_first_name,
                    is_legal_responsible=True,
                    contact=contact,
                )

            legal_resp.students.add(student_info.student)
            legal_resp.save()


class Migration(migrations.Migration):

    dependencies = [
        ("core", "0024_notificationlogmodel"),
    ]

    operations = [
        migrations.CreateModel(
            name="ContactModel",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("phone", models.CharField(blank=True, max_length=100)),
                ("mobile", models.CharField(blank=True, max_length=100)),
                ("email", models.EmailField(blank=True, max_length=254, null=True)),
            ],
        ),
        migrations.AddField(
            model_name="studentmodel",
            name="contact",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="core.contactmodel",
            ),
        ),
        migrations.CreateModel(
            name="ParentSettingModel",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("application", models.CharField(max_length=100)),
                ("description", models.TextField()),
            ],
        ),
        migrations.AlterField(
            model_name="notificationlogmodel",
            name="related_view",
            field=models.CharField(max_length=100),
        ),
        migrations.CreateModel(
            name="ParentNotificationSettingsModel",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                (
                    "period",
                    models.PositiveSmallIntegerField(
                        verbose_name="Number of days between notifications"
                    ),
                ),
                (
                    "contact",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="core.contactmodel"
                    ),
                ),
                (
                    "setting",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="core.parentsettingmodel"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="StudentRelativeModel",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("is_legal_responsible", models.BooleanField(default=False)),
                (
                    "relationship",
                    models.CharField(
                        choices=[("M", "Mother"), ("F", "Father"), ("O", "Other")], max_length=1
                    ),
                ),
                ("last_name", models.CharField(max_length=200)),
                ("first_name", models.CharField(max_length=200)),
                ("job", models.CharField(blank=True, max_length=500)),
                ("birth_date", models.DateField(blank=True, null=True)),
                (
                    "gender",
                    models.CharField(
                        choices=[("F", "Female"), ("M", "Male"), ("O", "Other"), ("", "Unknown")],
                        default="",
                        max_length=10,
                    ),
                ),
                (
                    "contact",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="core.contactmodel"
                    ),
                ),
                ("students", models.ManyToManyField(to="core.studentmodel")),
            ],
        ),
        migrations.RunPython(migrate_contacts),
    ]
