# Generated by Django 2.2.22 on 2021-05-27 11:43

from django.db import migrations
from django.core.exceptions import ObjectDoesNotExist


def migrate_group_to_level(apps, schema_editor):
    Group = apps.get_model("auth", "Group")
    ClasseModel = apps.get_model("core", "ClasseModel")
    TeachingModel = apps.get_model("core", "TeachingModel")
    LevelModel = apps.get_model("core", "LevelModel")

    # Assign levels to responsible from group names.
    for i in range(1, 8):
        coord_group = Group.objects.filter(name=f"coord{i}")
        educ_group = Group.objects.filter(name=f"educ{i}")

        if coord_group or educ_group:
            for t in TeachingModel.objects.all():
                LevelModel.objects.get_or_create(short_name=str(i), name=f"Niveau {i}", teaching=t)

        if coord_group:
            coord_resp = [u.responsiblemodel for u in coord_group.first().user_set.filter(responsiblemodel__isnull=False)]
            for r in coord_resp:
                levels = LevelModel.objects.filter(short_name=str(i), teaching__in=r.teaching.all())
                r.level.add(*levels)
        if educ_group:
            educ_resp = [u.responsiblemodel for u in educ_group.first().user_set.filter(responsiblemodel__isnull=False)]
            for r in educ_resp:
                levels = LevelModel.objects.filter(short_name=str(i), teaching__in=r.teaching.all())
                r.level.add(*levels)

    # Use level instead of year for classes.
    for c in ClasseModel.objects.all():
        try:
            level = LevelModel.objects.get(short_name=str(c.year), teaching=c.teaching)
            c.level = level
            c.save()
        except ObjectDoesNotExist:
            continue


class Migration(migrations.Migration):

    dependencies = [
        ('core', '0017_classemodel_level'),
    ]

    operations = [
        migrations.RunPython(migrate_group_to_level),
    ]
